var dn = require('./distinguishedname');

module.exports = {
  /**
   * Gets a properly formatted LDAP compound filter. This is a very simple approach to ensure that the LDAP
   * compound filter is wrapped with an enclosing () if necessary. It does not handle parsing of an existing
   * compound ldap filter.
   * @param {String} filter The LDAP filter to inspect.
   * @returns {String}
   */
  getCompoundFilter: function getCompoundFilter(filter) {
    if (! filter) return(false);
    if ((filter.charAt(0) === '(') && (filter.charAt(filter.length - 1) === ')')) {
      return(filter);
    }
    return('('+filter+')');
  },

  /**
   * Gets the ActiveDirectory LDAP query string for a user search.
   *
   * @private
   * @param {String} username The samAccountName or userPrincipalName (email) of the user.
   * @returns {String}
   */
  getUserQueryFilter: function getUserQueryFilter(username) {
    if (! username) return('(objectCategory=User)');
    if (dn.isDistinguishedName(username)) {
      return('(&(objectCategory=User)(distinguishedName='+dn.parseDistinguishedName(username)+'))');
    }
    return('(&(objectCategory=User)(|(sAMAccountName='+username+')(userPrincipalName='+username+')))');
  },

  /**
   * Gets the ActiveDirectory LDAP query string for a group search.
   *
   * @private
   * @param {String} dn The distinguishedName (dn) of the group or user to find membership for.
   * @returns {String}
   */
  getGroupQueryFilter: function getGroupQueryFilter(groupName) {
    if (! groupName) return('(objectCategory=Group)');
    if (dn.isDistinguishedName(groupName)) {
      return('(&(objectCategory=Group)(distinguishedName='+dn.parseDistinguishedName(groupName)+'))');
    }
    return('(&(objectCategory=Group)(cn='+groupName+'))');
  }
};

